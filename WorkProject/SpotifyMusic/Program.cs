using System.Data.Common;
using System.Text;
using Microsoft.AspNetCore.Server.Kestrel.Core;
using Microsoft.EntityFrameworkCore;
using SpotifyWebApi.Models;
using WorkProject.Auth.Handler;
using WorkProject.Auth.Interface;
using WorkProject.Auth.Service;
using WorkProject.GrpcService;
using WorkProject.GrpcService.Albums;
using WorkProject.GrpcService.Recommendations;
using DbConnection = SpotifyWebApi.Database.DbConnection;
using Microsoft.Extensions.Logging;
using DotNetEnv;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using MySqlConnector;
using Spotify.Recommendations;
using WorkProject.Helpers;

var builder = WebApplication.CreateBuilder(args);

// --- –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ ENV –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏ ---
// –£ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ ENV –≤–∂–µ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ docker-compose/k8s,
// –∞ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ—Ä–µ–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É Configuration.local.env

var runningInContainer = Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") == "true";
if (!runningInContainer)
    Env.Load(Path.Combine(builder.Environment.ContentRootPath, "Configuration.local.env"));

builder.Configuration.AddEnvironmentVariables();

// --- –¥–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏ ---

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// --- CORS ---
// –¥–æ–∑–≤–æ–ª—è—î–º–æ –±—É–¥—å-—è–∫—ñ –∑–∞–ø–∏—Ç–∏ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç—É/–¥–µ–±–∞–≥—É)

builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(
        builder =>
        {
            builder.AllowAnyOrigin()
                   .AllowAnyMethod()
                   .AllowAnyHeader();
        });
});

// --- –ë–î ---
// —Ä—è–¥–æ–∫ –∑ ENV –∞–±–æ appsettings.json

var cs = Environment.GetEnvironmentVariable("CONNECTIONSTRINGS__DEFAULTCONNECTION")
         ?? builder.Configuration.GetConnectionString("DefaultConnection");

if (string.IsNullOrWhiteSpace(cs))
    throw new InvalidOperationException("Missing ConnectionStrings:DefaultConnection (ENV –∞–±–æ appsettings).");

builder.Services.AddDbContext<DbConnection>(options =>
    options.UseMySql(cs, new MySqlServerVersion(new Version(8, 0, 36)), o => o.EnableRetryOnFailure()));

// --- gRPC + HttpClient ---

builder.Services.AddGrpc();
builder.Services.AddHttpClient();

// --- —Å–µ—Ä–≤—ñ—Å–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ---

builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<AuthService>();           // –ª–æ–≥—ñ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Spotify
builder.Services.AddScoped<ITokenService, TokenService>(); // –æ–Ω–æ–≤–ª–µ–Ω–Ω—è/–æ—Ç—Ä–∏–º–∞–Ω–Ω—è Spotify —Ç–æ–∫–µ–Ω—ñ–≤
builder.Services.AddScoped<JwtService>();               // –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è JWT —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
builder.Services.AddHttpContextAccessor();              // –ø–æ—Ç—Ä—ñ–±–µ–Ω —É AuthorizationHandler
builder.Services.AddScoped<AuthorizationHandler>();  // –¥–æ–¥–∞—î Spotify access_token —É HttpClient

// --- HttpClient-–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Spotify API ---
builder.Services.AddHttpClient<NewReleasesGrpcService>(client =>
{
    // üìå –ë–∞–∑–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Spotify API
    client.BaseAddress = new Uri("https://api.spotify.com/v1/");
    
    // ‚öôÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è:
    // - –¶–µ–π HttpClient –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∫–æ–ª–∏ ToDoAlbumGrpcService —Ä–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç–∏ –¥–æ Spotify.
    // - –ü–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º —Å–ø—Ä–∞—Ü—å–æ–≤—É—î AuthorizationHandler.
    // - AuthorizationHandler –¥—ñ—Å—Ç–∞—î access_token –∑ ITokenService.
    // - –ü–æ—Ç—ñ–º –¥–æ–¥–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: Bearer <access_token>.
    // - –£ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç —Ü—å–æ–≥–æ HttpClient –π–¥–µ –¥–æ Spotify –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
}).AddHttpMessageHandler<AuthorizationHandler>();

builder.Services.AddHttpClient<ToDoAlbumGrpcService>(client =>
{
    client.BaseAddress = new Uri("https://api.spotify.com/v1/");
}).AddHttpMessageHandler<AuthorizationHandler>();

builder.Services.AddHttpClient<RecommendationsGrpcService>(client =>
{
    client.BaseAddress = new Uri("https://api.spotify.com/v1/");
}).AddHttpMessageHandler<AuthorizationHandler>();

// --- gRPC –∫–ª—ñ—î–Ω—Ç–∏ ---

// --- gRPC –∫–ª—ñ—î–Ω—Ç–∏ –±–µ–∑ –≤—Ä–∞–ø–µ—Ä—ñ–≤ ---
// Recommendations
builder.Services.AddGrpcClient<Spotify.Recommendations.SpotifyRecommendationsService.SpotifyRecommendationsServiceClient>(options =>
{
    var url = builder.Configuration["GrpcSettings:RecommendationsServiceUrl"]
              ?? "http://localhost:5201";
    Console.WriteLine($"[gRPC] Using RecommendationsServiceUrl: {url}");
    options.Address = new Uri(url);
});

// Albums
builder.Services.AddGrpcClient<Spotify.ToDoAlbum.ToDoAlbumService.ToDoAlbumServiceClient>(options =>
{
    var url = builder.Configuration["GrpcSettings:AlbumServiceUrl"]
              ?? "http://localhost:5201";
    Console.WriteLine($"[gRPC] Using AlbumServiceUrl: {url}");
    options.Address = new Uri(url);
});

// New Releases
builder.Services.AddGrpcClient<Spotify.Newrelease.NewReleasesService.NewReleasesServiceClient>(options =>
{
    var url = builder.Configuration["GrpcSettings:ReleasesServiceUrl"]
              ?? "http://localhost:5201";
    Console.WriteLine($"[gRPC] Using ReleasesServiceUrl: {url}");
    options.Address = new Uri(url);
});


// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Kestrel (–ø–æ—Ä—Ç–∏ –¥–ª—è Swagger/gRPC) ---
builder.WebHost.ConfigureKestrel(options =>
{
    if (runningInContainer)
    {
        options.ListenAnyIP(5101, o => o.Protocols = HttpProtocols.Http2); // gRPC
        options.ListenAnyIP(5100, o => o.Protocols = HttpProtocols.Http1); // Swagger
    }
    else
    {
        options.ListenLocalhost(5201, lo => lo.Protocols = HttpProtocols.Http2); // gRPC –ª–æ–∫–∞–ª—å–Ω–æ
        options.ListenLocalhost(5200, lo => lo.Protocols = HttpProtocols.Http1); // Swagger –ª–æ–∫–∞–ª—å–Ω–æ
    }
});

// –í–º–∏–∫–∞—î HTTP/2 –±–µ–∑ TLS (h2c) –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ HttpClient/gRPC-–∫–ª—ñ—î–Ω—Ç—ñ–≤
// –Ü–Ω–∞–∫—à–µ .NET –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –±–ª–æ–∫—É—î HTTP/2 –±–µ–∑ HTTPS
AppContext.SetSwitch("System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport", true);

// --- JWT Authentication ---
// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω—ñ–≤ —É –≤—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(
            Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
    };
});

var app = builder.Build();

// --- Middleware pipeline ---
if (!runningInContainer) app.UseHttpsRedirection();

app.UseCors();           // –ø–æ–ª—ñ—Ç–∏–∫–∞ CORS
app.UseAuthentication(); // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω—ñ–≤
app.UseAuthorization();  // –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ claims/—Ä–æ–ª–µ–π

// --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î (–º—ñ–≥—Ä–∞—Ü—ñ—ó) ---
using (var scope = app.Services.CreateScope())
{
    var logger = scope.ServiceProvider
        .GetRequiredService<ILoggerFactory>()
        .CreateLogger("MigrationStartup");

    MigrationChecker.CheckAndApplyMigrations<DbConnection>(scope.ServiceProvider, logger);
}

// Swagger —Ç—ñ–ª—å–∫–∏ —É dev
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// gRPC —Å–µ—Ä–≤—ñ—Å–∏
app.MapGrpcService<NewReleasesGrpcService>();
app.MapGrpcService<ToDoAlbumGrpcService>();
app.MapGrpcService<RecommendationsGrpcService>();

// –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ (REST API)
app.MapControllers();

app.Run();
