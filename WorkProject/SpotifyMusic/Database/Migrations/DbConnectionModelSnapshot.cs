// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpotifyWebApi.Database;

#nullable disable

namespace WorkProject.Database.Migrations
{
    [DbContext(typeof(DbConnection))]
    partial class DbConnectionModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.AlbumArtistEnity", b =>
                {
                    b.Property<int>("AlbumArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("AlbumArtistId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("AlbumArtists");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.ArtistEnity", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.SavedAlbumArtistEnity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("SavedAlbumArtists");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.SavedSpotifyAlbumEnity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlbumType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ArtistNames")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpotifyUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnityUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserEnityUserId");

                    b.ToTable("SavedSpotifyAlbums");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.UserAlbumEnity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlbumType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpotifyUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnityUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserEnityUserId");

                    b.ToTable("UserAlbums");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.PlaylistEnity", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpotifyUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.PlaylistTrackEnity", b =>
                {
                    b.Property<int>("PlaylistTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistTrackId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("TrackId");

                    b.ToTable("PlaylistTracks");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.TrackArtistEnity", b =>
                {
                    b.Property<int>("TrackArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("TrackArtistId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackArtists");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.TrackEntity", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrackDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TrackId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.UserEnity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpotifyProfileUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpotifyUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.UserTrackLogEnity", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DurationMs")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PlayedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTrackLogs");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.AlbumArtistEnity", b =>
                {
                    b.HasOne("SpotifyWebApi.Models.Entities.UserAlbumEnity", "UserAlbumEnity")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyWebApi.Models.Entities.ArtistEnity", "ArtistEnity")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtistEnity");

                    b.Navigation("UserAlbumEnity");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.SavedAlbumArtistEnity", b =>
                {
                    b.HasOne("SpotifyWebApi.Models.Entities.SavedSpotifyAlbumEnity", "AlbumEnity")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyWebApi.Models.Entities.ArtistEnity", "ArtistEnity")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumEnity");

                    b.Navigation("ArtistEnity");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.SavedSpotifyAlbumEnity", b =>
                {
                    b.HasOne("WorkProject.Models.Entities.UserEnity", null)
                        .WithMany("SavedAlbums")
                        .HasForeignKey("UserEnityUserId");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.UserAlbumEnity", b =>
                {
                    b.HasOne("WorkProject.Models.Entities.UserEnity", null)
                        .WithMany("UserAlbum")
                        .HasForeignKey("UserEnityUserId");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.PlaylistTrackEnity", b =>
                {
                    b.HasOne("WorkProject.Models.Entities.PlaylistEnity", "PlaylistEnity")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkProject.Models.Entities.TrackEntity", "Track")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaylistEnity");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.TrackArtistEnity", b =>
                {
                    b.HasOne("SpotifyWebApi.Models.Entities.ArtistEnity", "ArtistEnity")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkProject.Models.Entities.TrackEntity", "Track")
                        .WithMany("TrackArtists")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtistEnity");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.TrackEntity", b =>
                {
                    b.HasOne("SpotifyWebApi.Models.Entities.UserAlbumEnity", "UserAlbum")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId");

                    b.Navigation("UserAlbum");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.UserTrackLogEnity", b =>
                {
                    b.HasOne("WorkProject.Models.Entities.UserEnity", "UserEnity")
                        .WithMany("TrackLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEnity");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.SavedSpotifyAlbumEnity", b =>
                {
                    b.Navigation("AlbumArtists");
                });

            modelBuilder.Entity("SpotifyWebApi.Models.Entities.UserAlbumEnity", b =>
                {
                    b.Navigation("AlbumArtists");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.PlaylistEnity", b =>
                {
                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.TrackEntity", b =>
                {
                    b.Navigation("PlaylistTracks");

                    b.Navigation("TrackArtists");
                });

            modelBuilder.Entity("WorkProject.Models.Entities.UserEnity", b =>
                {
                    b.Navigation("SavedAlbums");

                    b.Navigation("TrackLogs");

                    b.Navigation("UserAlbum");
                });
#pragma warning restore 612, 618
        }
    }
}
